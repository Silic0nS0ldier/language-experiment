// Langauge library is small, and imported by default
// Vendor packages fully qualified such that namespace collisons don't occur
using pkg:@std/ui-things:UI.View;
using Project.Entities.SomeEntity;

// class? interface? no such concept?
// what about records?
View, SomeEntity {
    /// <summary>
    ///     Override implementation for `View` and `SomeEntity`.
    ///     Resolves multiple inheritance conflict.
    /// </summary>
    override bool Refresh() {
        // Generics syntax used to clearly indicate calling of parent, and the specific type
        return parent<View>.Refresh() && parent<SomeEntity>.Refresh();
    }

    // What about property conflicts? Should be allowed to remap like with above example in a getter/setter
    // Should also be able to rename in scope of class (obviously casting up means right properties are hit)
}